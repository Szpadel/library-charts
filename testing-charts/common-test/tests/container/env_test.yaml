suite: container env values
templates:
  - common.yaml
tests:
  - it: default should pass
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        isNull:
          path: spec.template.spec.containers[0].env

  - it: KeyValue string should pass
    set:
      env:
        string: value_of_env
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: string
            value: value_of_env

  - it: KeyValue float should pass
    set:
      env:
        string: 4.2
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: string
            value: "4.2"

  - it: KeyValue int should pass
    set:
      env:
        string: 1
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: string
            value: "1"

  - it: Explicit ValueFrom in list should pass
    set:
      env:
        DYNAMIC_ENV_FROM_LIST:
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: DYNAMIC_ENV_FROM_LIST
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName

  - it: Implicit ValueFrom should pass
    set:
      env:
        DYNAMIC_ENV:
          fieldRef:
            fieldPath: spec.nodeName
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: DYNAMIC_ENV
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName

  - it: Templated value should pass
    set:
      env:
        DYNAMIC_ENV: "{{ .Release.Name }}-admin"
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: DYNAMIC_ENV
            value: RELEASE-NAME-admin

  - it: Templated explicit ValueFrom in list should pass
    set:
      someVal: spec.nodeName
      env:
        DYNAMIC_ENV_FROM_LIST:
          valueFrom:
            fieldRef:
              fieldPath: "{{ .Values.someVal }}"
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: DYNAMIC_ENV_FROM_LIST
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName

  - it: Templated implicit ValueFrom should pass
    set:
      someVal: spec.nodeName
      env:
        DYNAMIC_ENV:
          fieldRef:
            fieldPath: "{{ .Values.someVal }}"
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: DYNAMIC_ENV
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName

  - it: Combined KeyValue with Explicit ValueFrom should pass
    set:
      env:
        STATIC_ENV: static
        DYNAMIC_ENV:
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
    asserts:
      - documentIndex: &DeploymentDoc 0
        isKind:
          of: Deployment
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[0]
          value:
            name: DYNAMIC_ENV
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
      - documentIndex: *DeploymentDoc
        equal:
          path: spec.template.spec.containers[0].env[1]
          value:
            name: STATIC_ENV
            value: static

  - it: should allow removing and overwriting env included globally
    documentIndex: *DeploymentDoc
    set:
      env:
        SOME_ENV: asd
        SOME_OTHER_ENV: foo
      controller:
        env:
          SOME_ENV: ~
          SOME_OTHER_ENV: bar
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: SOME_OTHER_ENV
              value: bar

  - it: initContainers should inherit envs when requested
    documentIndex: *DeploymentDoc
    set:
      env:
        SOME_ENV: foo
      controller:
        initContainers:
          example:
            enabled: true
            inheritEnv: true
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.initContainers[0].env
          value:
            - name: SOME_ENV
              value: foo

  - it: additionalContainers should inherit envs when requested
    documentIndex: *DeploymentDoc
    set:
      env:
        SOME_ENV: foo
      controller:
        additionalContainers:
          example:
            enabled: true
            inheritEnv: true
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[1].env
          value:
            - name: SOME_ENV
              value: foo
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: SOME_ENV
              value: foo
